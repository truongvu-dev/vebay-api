import db from "../project-root/config/db.js";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import nodemailer from "nodemailer";

export const forgotPassword = async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email." });

  try {
    const [results] = await db.query(`SELECT * FROM users WHERE email = ?`, [email]);
    if (results.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

    const user = results[0];
    if (!user.is_verified)
      return res.status(403).json({ message: "T√†i kho·∫£n ch∆∞a x√°c minh." });

    const token = jwt.sign({ email: user.email }, process.env.SECRET_KEY, { expiresIn: "15m" });
    const resetLink = `${process.env.BASE_URL}/reset-password-confirm.html?token=${token}`;

    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.MAIL_USER,
        pass: process.env.MAIL_PASSWORD
      }
    });

    const mailOptions = {
      from: `"X√°c th·ª±c" <${process.env.MAIL_USER}>`,
      to: user.email,
      subject: "üîê Kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      html: `
        <p>Xin ch√†o <b>${user.username}</b>,</p>
        <p>Click v√†o li√™n k·∫øt ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (hi·ªáu l·ª±c 15 ph√∫t):</p>
        <a href="${resetLink}">${resetLink}</a>
        <p style="color: gray; font-size: 0.9em;">B·ªè qua n·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y.</p>
      `
    };

    transporter.sendMail(mailOptions, (err, info) => {
      if (err) {
        console.error("‚ùå L·ªói g·ª≠i mail:", err);
        return res.status(500).json({ message: "Kh√¥ng g·ª≠i ƒë∆∞·ª£c email." });
      }
      console.log(`üì® ƒê√£ g·ª≠i mail reset t·ªõi ${user.email}`);
      res.status(200).json({ message: "üìß Li√™n k·∫øt kh√¥i ph·ª•c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email!" });
    });
  } catch (err) {
    console.error("üî• L·ªói forgotPassword:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß." });
  }
};

export const resetPassword = async (req, res) => {
  const { token, password } = req.body;
  if (!token || !password)
    return res.status(400).json({ message: "Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u." });

  try {
    const decoded = jwt.verify(token, process.env.SECRET_KEY);
    const [rows] = await db.query(`SELECT * FROM users WHERE email = ?`, [decoded.email]);
    if (rows.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

    const user = rows[0];
    if (!user.is_verified)
      return res.status(403).json({ message: "T√†i kho·∫£n ch∆∞a x√°c minh." });

    const hashed = await bcrypt.hash(password, 10);
    await db.query(`UPDATE users SET password = ? WHERE email = ?`, [hashed, decoded.email]);
    res.json({ message: "‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng." });
  } catch (err) {
    console.error("‚õî Token l·ªói ho·∫∑c h·∫øt h·∫°n:", err);
    res.status(403).json({ message: "Li√™n k·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
  }
};
